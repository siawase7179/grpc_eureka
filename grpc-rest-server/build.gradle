plugins {
   	id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.protobuf' version "0.8.18"
    id 'java'
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 17

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = '2021.0.5'
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.10'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-config-client'
	
	implementation 'org.json:json:20220924'

    implementation 'net.devh:grpc-spring-boot-starter:2.15.0.RELEASE'


    compileOnly 'io.grpc:grpc-protobuf:1.42.2'
    compileOnly 'io.grpc:grpc-stub:1.42.2'

    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-util
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.21.5'
        
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5'

	
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'
	
	testImplementation  'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

springBoot {
    buildInfo()
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/genereate"

    clean{
        delete generatedFilesBaseDir
    }

    protoc {
        artifact = 'com.google.protobuf:protoc:3.19.2'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.42.2'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}



tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('bootBuildImage') {
    imageName = "${rootProject.name}".toLowerCase(Locale.US).replaceAll('_', '-')

    pullPolicy = 'IF_NOT_PRESENT'

    environment = ['BP_JVM_VERSION': '17.*']

    buildpacks = [
            'gcr.io/paketo-buildpacks/adoptium',
            'urn:cnb:builder:paketo-buildpacks/java'
    ]

    verboseLogging = true
}
